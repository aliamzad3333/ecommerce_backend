name: Deploy to Server

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[test]') || contains(github.event.head_commit.message, '[run-tests]')
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build
      run: go build -v ./...
    
    - name: Test
      run: go test -v ./...

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build Go application
      run: |
        go mod download
        go build -o ecommerce-backend main.go
    
    - name: Upload binary to server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        source: "ecommerce-backend"
        target: "/www/wwwroot/ecommerce-backend/"
        strip_components: 0
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # Suppress hostname warning (harmless)
          export DEBIAN_FRONTEND=noninteractive
          
          # Create directory if it doesn't exist (aaPanel structure)
          mkdir -p /www/wwwroot/ecommerce-backend || sudo mkdir -p /www/wwwroot/ecommerce-backend
          
          # Wait a moment for scp to complete
          sleep 3
          
          # Stop the existing service first
          sudo systemctl stop ecommerce-backend || true
          
          # Clean up any leftover .new directory from previous failed deployments
          if [ -d /www/wwwroot/ecommerce-backend/ecommerce-backend.new ]; then
            echo "Removing leftover directory from previous deployment..."
            # Check if file is inside the directory first
            if [ -f /www/wwwroot/ecommerce-backend/ecommerce-backend.new/ecommerce-backend ]; then
              echo "Found file inside directory, extracting it..."
              sudo mv /www/wwwroot/ecommerce-backend/ecommerce-backend.new/ecommerce-backend /www/wwwroot/ecommerce-backend/ecommerce-backend.tmp
              sudo rm -rf /www/wwwroot/ecommerce-backend/ecommerce-backend.new
              sudo mv /www/wwwroot/ecommerce-backend/ecommerce-backend.tmp /www/wwwroot/ecommerce-backend/ecommerce-backend
              echo "✅ Extracted file from directory"
            else
              sudo rm -rf /www/wwwroot/ecommerce-backend/ecommerce-backend.new
            fi
          fi
          
          # Debug: List files in target directory BEFORE backup
          echo "=== Files in deployment directory (before backup) ==="
          ls -la /www/wwwroot/ecommerce-backend/ || sudo ls -la /www/wwwroot/ecommerce-backend/
          
          # Find the most recently modified ecommerce-backend file (should be the uploaded one)
          RECENT_FILE=$(find /www/wwwroot/ecommerce-backend -maxdepth 1 -name "ecommerce-backend" -type f -mmin -10 | head -1)
          
          # Backup existing binary if it exists and is NOT the recently uploaded one
          if [ -f /www/wwwroot/ecommerce-backend/ecommerce-backend ]; then
            if [ -n "$RECENT_FILE" ] && [ "$RECENT_FILE" = "/www/wwwroot/ecommerce-backend/ecommerce-backend" ]; then
              echo "File appears to be newly uploaded (recent modification). Backing up any old backup files..."
            else
              echo "Backing up existing binary..."
              sudo mv /www/wwwroot/ecommerce-backend/ecommerce-backend /www/wwwroot/ecommerce-backend/ecommerce-backend.backup.$(date +%Y%m%d_%H%M%S)
            fi
          fi
          
          # Check for uploaded binary
          sleep 1
          
          if [ ! -f /www/wwwroot/ecommerce-backend/ecommerce-backend ]; then
            echo "ERROR: Binary file not found after upload"
            echo "Checking what files exist..."
            ls -la /www/wwwroot/ecommerce-backend/ || sudo ls -la /www/wwwroot/ecommerce-backend/
            echo "Checking for recently modified files..."
            find /www/wwwroot/ecommerce-backend -maxdepth 1 -type f -mmin -10 2>/dev/null || echo "No recent files found"
            exit 1
          fi
          
          # Verify it's actually a file and check size
          if [ ! -f /www/wwwroot/ecommerce-backend/ecommerce-backend ]; then
            echo "ERROR: Path exists but is not a regular file"
            file /www/wwwroot/ecommerce-backend/ecommerce-backend 2>/dev/null || echo "Cannot determine file type"
            exit 1
          fi
          
          # Check file size (should be > 1MB for a Go binary)
          FILE_SIZE=$(stat -f%z /www/wwwroot/ecommerce-backend/ecommerce-backend 2>/dev/null || stat -c%s /www/wwwroot/ecommerce-backend/ecommerce-backend 2>/dev/null || echo "0")
          if [ "$FILE_SIZE" -lt 1000000 ]; then
            echo "WARNING: File size is suspiciously small ($FILE_SIZE bytes). Expected > 1MB for binary."
          else
            echo "✅ Binary file found (size: $FILE_SIZE bytes)"
          fi
          
          # Set permissions
          echo "Setting permissions..."
          sudo chmod +x /www/wwwroot/ecommerce-backend/ecommerce-backend
          sudo chown www:www /www/wwwroot/ecommerce-backend/ecommerce-backend
          
          # Verify it's executable and exists
          if [ ! -f /www/wwwroot/ecommerce-backend/ecommerce-backend ]; then
            echo "ERROR: Binary file missing after move"
            exit 1
          fi
          
          if [ ! -x /www/wwwroot/ecommerce-backend/ecommerce-backend ]; then
            echo "ERROR: Binary is not executable after chmod"
            exit 1
          fi
          
          echo "✅ Binary is ready"
          
          # Ensure uploads directory exists with proper permissions
          sudo mkdir -p /www/wwwroot/ecommerce-backend/uploads/products
          sudo mkdir -p /www/wwwroot/ecommerce-backend/uploads/slider
          sudo chown -R www:www /www/wwwroot/ecommerce-backend/uploads
          
          # Restart the service (restart handles stop+start better)
          sudo systemctl restart ecommerce-backend
          sudo systemctl enable ecommerce-backend
          
          # Wait for service to fully start
          sleep 3
          
          # Check service status
          sudo systemctl is-active ecommerce-backend || {
            echo "Service failed to start. Checking logs:"
            sudo journalctl -u ecommerce-backend -n 20 --no-pager
            exit 1
          }
          
          # Test the API with retries
          for i in {1..5}; do
            sleep 2
            if curl -f http://localhost:8080/health > /dev/null 2>&1; then
              echo "✅ Health check passed"
              break
            fi
            echo "Attempt $i: Health check failed, retrying..."
          done
          
          # Final status check
          sudo systemctl status ecommerce-backend --no-pager -l

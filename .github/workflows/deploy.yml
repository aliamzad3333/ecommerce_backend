name: Deploy to Server

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[test]') || contains(github.event.head_commit.message, '[run-tests]')
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build
      run: go build -v ./...
    
    - name: Test
      run: go test -v ./...

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build Go application
      run: |
        go mod download
        go build -o ecommerce-backend main.go
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        script: |
          # Create directory if it doesn't exist (aaPanel structure)
          sudo mkdir -p /www/wwwroot/ecommerce-backend
          sudo chown -R www:www /www/wwwroot/ecommerce-backend
          
          # Stop the existing service
          sudo systemctl stop ecommerce-backend || true
          
          # Backup current binary
          if [ -f /www/wwwroot/ecommerce-backend/ecommerce-backend ]; then
            sudo mv /www/wwwroot/ecommerce-backend/ecommerce-backend /www/wwwroot/ecommerce-backend/ecommerce-backend.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Set proper permissions
          sudo chown -R www:www /www/wwwroot/ecommerce-backend
          
          # Start the service
          sudo systemctl start ecommerce-backend
          sudo systemctl enable ecommerce-backend
          
          # Check service status
          sudo systemctl status ecommerce-backend
          
          # Test the API
          sleep 5
          curl -f http://localhost:8080/health || echo "Health check failed"
    
    - name: Upload binary to server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        source: "ecommerce-backend"
        target: "/www/wwwroot/ecommerce-backend/"
        strip_components: 1
    
    - name: Finalize deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        script: |
          # Set proper permissions for the uploaded binary
          sudo chmod +x /www/wwwroot/ecommerce-backend/ecommerce-backend
          sudo chown www:www /www/wwwroot/ecommerce-backend/ecommerce-backend
          
          # Copy environment file if it doesn't exist
          if [ ! -f /www/wwwroot/ecommerce-backend/.env ]; then
            sudo cp env.example /www/wwwroot/ecommerce-backend/.env
            sudo chown www:www /www/wwwroot/ecommerce-backend/.env
          fi
          
          # Update environment for production
          sudo sed -i 's/MONGODB_URI=mongodb:\/\/localhost:27017/MONGODB_URI=mongodb:\/\/localhost:27017/' /www/wwwroot/ecommerce-backend/.env
          sudo sed -i 's/PORT=8080/PORT=8080/' /www/wwwroot/ecommerce-backend/.env
          sudo sed -i 's/JWT_SECRET=your-super-secret-jwt-key-here/JWT_SECRET=production-secret-key-change-this/' /www/wwwroot/ecommerce-backend/.env
          
          # Set proper permissions
          sudo chown -R www:www /www/wwwroot/ecommerce-backend
          
          # Restart the service with new binary
          sudo systemctl restart ecommerce-backend
          
          # Check service status
          sudo systemctl status ecommerce-backend
          
          # Test the API
          sleep 5
          curl -f http://localhost:8080/health || echo "Health check failed"
